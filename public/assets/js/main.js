(()=>{"use strict";var t={512:function(t,e,i){var n,s,o,r,a,l=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const h=c(i(109));s=new WeakMap,o=new WeakMap,n=new WeakSet,r=function(t){t(this).forEach((t=>{this.set(t)}))},a=function(){l(this,o,"f").forEach(((t,e)=>{if("lazy"in t&&t.lazy)return;let i=t;"useClass"in t&&"factory"in t&&(i=t.factory(this),l(this,o,"f").set(e,i)),"start"in i&&"function"==typeof i.start&&i.start(this),"listeners"in i&&"function"==typeof i.listeners&&l(this,s,"f").register(i)}))},e.default=class{constructor(t,e){n.add(this),this.dom=t,s.set(this,new h.default),o.set(this,new Map),l(this,n,"m",r).call(this,e)}start(){"loading"===this.dom.readyState?this.dom.addEventListener("DOMContentLoaded",(()=>{l(this,n,"m",a).call(this)})):l(this,n,"m",a).call(this)}reload(t){t&&(this.dom.open(),this.dom.write(t),this.dom.close()),location.reload()}set(t){const e="useClass"in t?t.useClass:t.constructor;l(this,o,"f").set(e,t)}get(t){const e=l(this,o,"f").get(t);if(!e)throw new Error(`Service ${t.name} not found`);if("useClass"in e&&"factory"in e){const i=e.factory(this);return l(this,o,"f").set(t,i),i}return e}dispatch(t){l(this,s,"f").dispatch(t)}}},635:function(t,e){var i,n,s,o,r=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i},a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.AutoSearch=void 0,e.AutoSearch=class{constructor(t,e,o){i.add(this),this.form=t,this.source=e,this.page=o,n.set(this,void 0),s.set(this,null),r(this,n,new AbortController,"f")}init(){this.form.addEventListener("input",this.onInput.bind(this))}onInput(){a(this,s,"f")&&clearTimeout(a(this,s,"f")),r(this,s,setTimeout((()=>{a(this,i,"m",o).call(this,new FormData(this.form))}),200),"f")}},n=new WeakMap,s=new WeakMap,i=new WeakSet,o=function(t){a(this,n,"f").abort(),r(this,n,new AbortController,"f"),fetch(this.source+(-1===this.source.indexOf("?")?"?":"&")+new URLSearchParams(t).toString(),{signal:a(this,n,"f").signal,method:"GET"}).then((t=>t.json())).then((t=>{if("object"!=typeof t)throw new Error("Invalid response");Object.entries(t).forEach((([t,e])=>{const i=this.page.querySelector(`#${t}`);i&&(i.innerHTML=e)}))}))}},818:function(t,e){var i,n,s,o,r,a,l=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i},c=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Autocomplete=void 0,e.Autocomplete=class{constructor(t,e){i.add(this),this.input=t,this.results=e,n.set(this,null),s.set(this,null),o.set(this,void 0),r.set(this,null),l(this,o,new AbortController,"f")}init(){this.input.addEventListener("input",this.onInput.bind(this)),this.input.addEventListener("keydown",this.onKeyPress.bind(this)),this.input.addEventListener("blur",this.close.bind(this)),this.input.addEventListener("focus",this.onInput.bind(this)),this.results.addEventListener("mousedown",this.onClick.bind(this))}close(){this.results.classList.remove("open"),this.results.innerHTML="",l(this,n,null,"f"),l(this,s,null,"f")}select(t){var e;const i=this.results.querySelectorAll("li").length;if(void 0===t||t<0||t>=i)return l(this,n,null,"f"),void(this.input.value=null!==(e=c(this,s,"f"))&&void 0!==e?e:"");l(this,n,t,"f"),this.results.querySelectorAll("li").forEach(((t,e)=>{var i;e!==c(this,n,"f")?t.classList.remove("selected"):(t.classList.add("selected"),this.input.value=(null!==(i=t.textContent)&&void 0!==i?i:"").trim())}))}onInput(){const t=this.input.value;t?(c(this,r,"f")&&clearTimeout(c(this,r,"f")),l(this,r,setTimeout((()=>{l(this,s,t,"f"),c(this,i,"m",a).call(this,t)}),200),"f")):this.close()}onKeyPress(t){"Escape"!==t.key?("ArrowDown"===t.key&&(t.preventDefault(),this.select(null===c(this,n,"f")?0:c(this,n,"f")+1)),"ArrowUp"===t.key&&(t.preventDefault(),this.select(null===c(this,n,"f")?0:c(this,n,"f")-1))):this.close()}onClick(t){var e;const i=t.target;i.matches("li")&&(this.input.value=(null!==(e=i.textContent)&&void 0!==e?e:"").trim(),this.close())}},n=new WeakMap,s=new WeakMap,o=new WeakMap,r=new WeakMap,i=new WeakSet,a=function(t){c(this,o,"f").abort(),l(this,o,new AbortController,"f");const e=this.results.dataset.autocompleteSrc;fetch(`${e}&query=${t}`,{signal:c(this,o,"f").signal}).then((t=>t.text())).then((t=>{l(this,n,null,"f"),this.results.innerHTML=t,this.results.classList.add("open"),this.results.style.top=`${this.input.offsetTop+this.input.offsetHeight}px`,this.results.style.left=`${this.input.offsetLeft}px`}))}},560:function(t,e,i){var n,s=this&&this.__decorate||function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},r=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i},a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0});const l=i(109),c=i(712),h=i(635);class u{constructor(t){this.app=t,n.set(this,null)}start(){this.onLoadingPage()}onLoadingPage(){const t=this.app.dom.querySelector("#list-users-form");t&&(r(this,n,new h.AutoSearch(t,t.dataset.autosearchSource,this.app.dom.getElementById("page-content")),"f"),a(this,n,"f").init())}}n=new WeakMap,e.default=u,s([(0,l.Listener)(c.PJaxFinishEvent),o("design:type",Function),o("design:paramtypes",[]),o("design:returntype",void 0)],u.prototype,"onLoadingPage",null)},312:function(t,e,i){var n,s,o,r,a,l,c,h,u=this&&this.__decorate||function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},d=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},f=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},p=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)},v=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i};Object.defineProperty(e,"__esModule",{value:!0});const m=i(109),w=i(712);class y{constructor(t){n.add(this),this.app=t,s.set(this,null),o.set(this,!1),r.set(this,null),a.set(this,0),l.set(this,!0),c.set(this,null)}start(){this.onLoadingChat()}refresh(){var t;return f(this,void 0,void 0,(function*(){const e=this.app.dom.querySelector("#chat .messages");return fetch(null!==(t=p(this,s,"f"))&&void 0!==t?t:"").then((t=>t.text())).then((t=>{null!==e&&p(this,o,"f")&&(e.innerHTML=t,p(this,l,"f")&&e.scrollTo(0,e.scrollHeight))}))}))}onPageUnload(){v(this,o,!1,"f"),v(this,s,null,"f"),v(this,a,0,"f"),v(this,l,!0,"f"),null!==p(this,c,"f")&&(p(this,c,"f").close(),v(this,c,null,"f")),null!==p(this,r,"f")&&(clearTimeout(p(this,r,"f")),v(this,r,null,"f"))}onLoadingChat(){var t,e,i;v(this,o,!1,"f");const r=this.app.dom.querySelector("#chat .messages");null!==r&&(r.scrollTo(0,r.scrollHeight),r.addEventListener("scroll",(()=>{v(this,l,r.scrollTop+r.clientHeight>=r.scrollHeight,"f")})),v(this,s,null!==(t=null==r?void 0:r.dataset.source)&&void 0!==t?t:null,"f"),v(this,a,parseInt(null!==(e=null==r?void 0:r.dataset.pullingDelay)&&void 0!==e?e:"0"),"f"),p(this,s,"f")&&(v(this,o,!0,"f"),p(this,n,"m",h).call(this),v(this,c,new EventSource(null!==(i=null==r?void 0:r.dataset.events)&&void 0!==i?i:""),"f"),p(this,c,"f").onmessage=t=>{this.refresh()},p(this,c,"f").onerror=t=>{console.log("error",t)}))}}s=new WeakMap,o=new WeakMap,r=new WeakMap,a=new WeakMap,l=new WeakMap,c=new WeakMap,n=new WeakSet,h=function t(){!p(this,o,"f")||p(this,a,"f")<=0||(null!==p(this,r,"f")&&clearTimeout(p(this,r,"f")),v(this,r,setTimeout((()=>{this.refresh().then((()=>{p(this,n,"m",t).call(this)}))}),p(this,a,"f")),"f"))},e.default=y,u([(0,m.Listener)(w.PJaxLoadingEvent),d("design:type",Function),d("design:paramtypes",[]),d("design:returntype",void 0)],y.prototype,"onPageUnload",null),u([(0,m.Listener)(w.PJaxFinishEvent),d("design:type",Function),d("design:paramtypes",[]),d("design:returntype",void 0)],y.prototype,"onLoadingChat",null)},109:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Listener=void 0;const i=Symbol("internalListeners");e.Listener=function(t){return function(e,n,s){var o;if(!(i in e)){if("listeners"in e)throw new Error(`Cannot mix @Listener and 'listeners()' method on ${e.constructor.name}`);e[i]={},e.listeners=function(){const t=this[i],e={};for(const[i,n]of Object.entries(t))e[i]=n.map((t=>t.bind(this)));return e}}let r=null;if(r="string"==typeof t?t:(new t).name,!r)throw new Error(`Cannot resolve the event name for ${e.constructor.name}.${n}`);e[i][r]=null!==(o=e[i][r])&&void 0!==o?o:[],e[i][r].push(s.value)}},e.default=class{constructor(){this.listeners={}}register(t){for(const[e,i]of Object.entries(t.listeners()))i instanceof Array?i.forEach((t=>{this.subscribe(e,t)})):this.subscribe(e,i)}subscribe(t,e){var i;const n=null!==(i=this.listeners[t])&&void 0!==i?i:[];n.push(e),this.listeners[t]=n}dispatch(t,e){var i;e=null!=e?e:t.name,(null!==(i=this.listeners[e])&&void 0!==i?i:[]).forEach((function(e){e(t)}))}}},960:function(t,e,i){var n,s=this&&this.__decorate||function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},r=this&&this.__classPrivateFieldSet||function(t,e,i,n,s){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?s.call(t,i):s?s.value=i:e.set(t,i),i},a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Layout=void 0;const l=i(712),c=i(109),h=i(818);class u{constructor(t,e){this.dom=t,this.app=e,n.set(this,void 0),r(this,n,null,"f")}start(){const t=this.dom.querySelector("#search-bar input[name=query]"),e=this.dom.querySelector("#search-bar .autocomplete-results");t&&e&&(r(this,n,new h.Autocomplete(t,e),"f"),a(this,n,"f").init())}onPjaxLoading(t){var e,i;t.trigger&&(null===(e=this.dom.querySelector("header"))||void 0===e?void 0:e.contains(t.trigger))&&(null===(i=this.dom.querySelector("#page-content"))||void 0===i||i.classList.add("loading-start-top"))}checkLayoutHasChanged(t){var e;const i=null===(e=this.dom.querySelector("html"))||void 0===e?void 0:e.dataset.layout;console.log(i,t.content.layout),i&&i!==t.content.layout&&this.app.reload()}onPjaxFinish(){const t=this.dom.querySelector("#page-content");t&&(t.classList.contains("loading-start-top")&&(t.classList.remove("loading-start-top"),t.classList.add("loading-end-top"),setTimeout((function(){t.classList.remove("loading-end-top")}),300)),t.classList.contains("loading-start-left")&&(t.classList.remove("loading-start-left"),t.classList.add("loading-end-left"),setTimeout((function(){t.classList.remove("loading-end-left")}),300)))}}e.Layout=u,n=new WeakMap,s([(0,c.Listener)(l.PJaxLoadingEvent),o("design:type",Function),o("design:paramtypes",[l.PJaxLoadingEvent]),o("design:returntype",void 0)],u.prototype,"onPjaxLoading",null),s([(0,c.Listener)(l.PJaxFinishEvent),o("design:type",Function),o("design:paramtypes",[l.PJaxFinishEvent]),o("design:returntype",void 0)],u.prototype,"checkLayoutHasChanged",null),s([(0,c.Listener)(l.PJaxFinishEvent),o("design:type",Function),o("design:paramtypes",[]),o("design:returntype",void 0)],u.prototype,"onPjaxFinish",null)},712:function(t,e){var i,n,s,o,r,a=this&&this.__classPrivateFieldGet||function(t,e,i,n){if("a"===i&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?n:"a"===i?n.call(t):n?n.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.PJaxFinishEvent=e.PJaxLoadingEvent=void 0;class l{constructor(t,e){this.target=t,this.trigger=e,this.name="pjax:loading"}}e.PJaxLoadingEvent=l;class c{constructor(t,e,i){this.target=t,this.content=e,this.trigger=i,this.name="pjax:finish"}}e.PJaxFinishEvent=c,i=new WeakSet,n=function(t){try{let e=JSON.parse(t);const i=this.app.dom;i.title=e.title||this.config.defaultTitle;for(let t in e){const n=i.getElementById(t);if(n){const s=i.createElement("div");s.innerHTML=e[t],n.replaceChildren(...s.children[0].childNodes)}}return e}catch(e){this.app.reload(t)}},s=function(){this.app.dom.addEventListener("click",(t=>{const e=t.target;null===e||e.matches(this.config.noPjaxSelector)||e instanceof HTMLAnchorElement&&e.matches("a")&&(t.preventDefault(),this.load(e.href,!0,e))}))},o=function(){this.app.dom.addEventListener("submit",(t=>{if(t.target instanceof HTMLFormElement&&t.target.matches("form")){t.preventDefault();const e=t.target;e.classList.add("submitting"),e.inert=!0;let i=e.action;if("get"===e.method)return i+=(i.includes("?")?"&":"?")+new URLSearchParams(new FormData(e)),void this.load(i).then((function(){e.classList.remove("submitting"),e.inert=!1}));this.submit(i,new FormData(e)).then((()=>{e.classList.remove("submitting"),e.inert=!1}))}}))},r=function(){window.addEventListener("popstate",(t=>{this.load(location.href,!1)}))},e.default=class{constructor(t,e){i.add(this),this.app=t,this.config=e}start(){a(this,i,"m",s).call(this),a(this,i,"m",o).call(this),a(this,i,"m",r).call(this)}load(t,e=!0,i){return this.send(t,{},e,i)}submit(t,e,i=!0,n){return this.send(t,{method:"post",body:e},i,n)}send(t,e,s=!0,o){return this.app.dispatch(new l(t,o)),s&&history.pushState(null,"",t),e.headers||(e.headers={"X-PJAX":"true"}),fetch(t,e).then((e=>(s&&e.url!==t&&history.pushState(null,"",e.url),e.text()))).then((t=>a(this,i,"m",n).call(this,t))).then((e=>(e&&this.app.dispatch(new c(t,e,o)),e)))}}},817:function(t,e,i){var n=this&&this.__decorate||function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},s=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;const o=i(712),r=i(109);class a{constructor(t){this.dom=t}animateOpenPost(t){if(!t.trigger)return;const e=t.trigger.closest(".post");e&&e instanceof HTMLElement&&(window.scrollTo(0,0),e.style.position="fixed",e.style.height=e.offsetHeight+"px",e.style.top=e.offsetTop+"px",setTimeout((function(){e.classList.add("opening"),e.style.height="",e.style.top=""}),1))}animateTagClick(t){var e;t.trigger&&t.trigger.closest(".tags")&&(null===(e=this.dom.querySelector("#page-content"))||void 0===e||e.classList.add("loading-start-left"))}}e.Post=a,n([(0,r.Listener)(o.PJaxLoadingEvent),s("design:type",Function),s("design:paramtypes",[o.PJaxLoadingEvent]),s("design:returntype",void 0)],a.prototype,"animateOpenPost",null),n([(0,r.Listener)(o.PJaxLoadingEvent),s("design:type",Function),s("design:paramtypes",[o.PJaxLoadingEvent]),s("design:returntype",void 0)],a.prototype,"animateTagClick",null)},299:function(t,e,i){var n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=s(i(512)),r=s(i(890));null===(n=document.querySelector("html"))||void 0===n||n.dataset.layout,new o.default(document,r.default).start()},890:function(t,e,i){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(i(712)),o=i(960),r=i(817),a=n(i(312)),l=n(i(560));e.default=t=>[new s.default(t,{defaultTitle:"My Blog",noPjaxSelector:".no-pjax"}),new o.Layout(t.dom,t),new r.Post(t.dom),new a.default(t),new l.default(t)]}},e={};!function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}(299)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,