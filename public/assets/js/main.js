(()=>{"use strict";var t={472:function(t,e,s){var i,n,o,r,a,l=this&&this.__classPrivateFieldGet||function(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const h=c(s(214));n=new WeakMap,o=new WeakMap,i=new WeakSet,r=function(t){t(this).forEach((t=>{this.set(t)}))},a=function(){l(this,o,"f").forEach(((t,e)=>{if("lazy"in t&&t.lazy)return;let s=t;"useClass"in t&&"factory"in t&&(s=t.factory(this),l(this,o,"f").set(e,s)),"start"in s&&"function"==typeof s.start&&s.start(this),"listeners"in s&&"function"==typeof s.listeners&&l(this,n,"f").register(s)}))},e.default=class{constructor(t,e){i.add(this),this.dom=t,n.set(this,new h.default),o.set(this,new Map),l(this,i,"m",r).call(this,e)}start(){"loading"===this.dom.readyState?this.dom.addEventListener("DOMContentLoaded",(()=>{l(this,i,"m",a).call(this)})):l(this,i,"m",a).call(this)}reload(t){t&&(this.dom.open(),this.dom.write(t),this.dom.close()),location.reload()}set(t){const e="useClass"in t?t.useClass:t.constructor;l(this,o,"f").set(e,t)}get(t){const e=l(this,o,"f").get(t);if(!e)throw new Error(`Service ${t.name} not found`);if("useClass"in e&&"factory"in e){const s=e.factory(this);return l(this,o,"f").set(t,s),s}return e}dispatch(t){l(this,n,"f").dispatch(t)}}},2:function(t,e){var s,i,n,o,r,a,l=this&&this.__classPrivateFieldSet||function(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s},c=this&&this.__classPrivateFieldGet||function(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Autocomplete=void 0,e.Autocomplete=class{constructor(t,e){s.add(this),this.input=t,this.results=e,i.set(this,null),n.set(this,null),o.set(this,void 0),r.set(this,null),l(this,o,new AbortController,"f")}init(){this.input.addEventListener("input",this.onInput.bind(this)),this.input.addEventListener("keydown",this.onKeyPress.bind(this)),this.input.addEventListener("blur",this.close.bind(this)),this.input.addEventListener("focus",this.onInput.bind(this)),this.results.addEventListener("mousedown",this.onClick.bind(this))}close(){this.results.classList.remove("open"),this.results.innerHTML="",l(this,i,null,"f"),l(this,n,null,"f")}select(t){var e;const s=this.results.querySelectorAll("li").length;if(void 0===t||t<0||t>=s)return l(this,i,null,"f"),void(this.input.value=null!==(e=c(this,n,"f"))&&void 0!==e?e:"");l(this,i,t,"f"),this.results.querySelectorAll("li").forEach(((t,e)=>{var s;e!==c(this,i,"f")?t.classList.remove("selected"):(t.classList.add("selected"),this.input.value=(null!==(s=t.textContent)&&void 0!==s?s:"").trim())}))}onInput(){const t=this.input.value;t?(c(this,r,"f")&&clearTimeout(c(this,r,"f")),l(this,r,setTimeout((()=>{l(this,n,t,"f"),c(this,s,"m",a).call(this,t)}),200),"f")):this.close()}onKeyPress(t){"Escape"!==t.key?("ArrowDown"===t.key&&(t.preventDefault(),this.select(null===c(this,i,"f")?0:c(this,i,"f")+1)),"ArrowUp"===t.key&&(t.preventDefault(),this.select(null===c(this,i,"f")?0:c(this,i,"f")-1))):this.close()}onClick(t){var e;const s=t.target;s.matches("li")&&(this.input.value=(null!==(e=s.textContent)&&void 0!==e?e:"").trim(),this.close())}},i=new WeakMap,n=new WeakMap,o=new WeakMap,r=new WeakMap,s=new WeakSet,a=function(t){c(this,o,"f").abort(),l(this,o,new AbortController,"f");const e=this.results.dataset.autocompleteSrc;fetch(`${e}&query=${t}`,{signal:c(this,o,"f").signal}).then((t=>t.text())).then((t=>{l(this,i,null,"f"),this.results.innerHTML=t,this.results.classList.add("open"),this.results.style.top=`${this.input.offsetTop+this.input.offsetHeight}px`,this.results.style.left=`${this.input.offsetLeft}px`}))}},362:function(t,e,s){var i,n,o,r,a,l,c,h,u=this&&this.__decorate||function(t,e,s,i){var n,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,s,i);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,s,r):n(e,s))||r);return o>3&&r&&Object.defineProperty(e,s,r),r},d=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},f=this&&this.__awaiter||function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},p=this&&this.__classPrivateFieldGet||function(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)},v=this&&this.__classPrivateFieldSet||function(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s};Object.defineProperty(e,"__esModule",{value:!0});const m=s(214),y=s(188);class g{constructor(t){i.add(this),this.app=t,n.set(this,null),o.set(this,!1),r.set(this,null),a.set(this,0),l.set(this,!0),c.set(this,null)}start(){this.onLoadingChat()}refresh(){var t;return f(this,void 0,void 0,(function*(){const e=this.app.dom.querySelector("#chat .messages");return fetch(null!==(t=p(this,n,"f"))&&void 0!==t?t:"").then((t=>t.text())).then((t=>{null!==e&&p(this,o,"f")&&(e.innerHTML=t,p(this,l,"f")&&e.scrollTo(0,e.scrollHeight))}))}))}onPageUnload(){v(this,o,!1,"f"),v(this,n,null,"f"),v(this,a,0,"f"),v(this,l,!0,"f"),null!==p(this,c,"f")&&(p(this,c,"f").close(),v(this,c,null,"f")),null!==p(this,r,"f")&&(clearTimeout(p(this,r,"f")),v(this,r,null,"f"))}onLoadingChat(){var t,e,s;v(this,o,!1,"f");const r=this.app.dom.querySelector("#chat .messages");null!==r&&(r.scrollTo(0,r.scrollHeight),r.addEventListener("scroll",(()=>{v(this,l,r.scrollTop+r.clientHeight>=r.scrollHeight,"f")})),v(this,n,null!==(t=null==r?void 0:r.dataset.source)&&void 0!==t?t:null,"f"),v(this,a,parseInt(null!==(e=null==r?void 0:r.dataset.pullingDelay)&&void 0!==e?e:"0"),"f"),p(this,n,"f")&&(v(this,o,!0,"f"),p(this,i,"m",h).call(this),v(this,c,new EventSource(null!==(s=null==r?void 0:r.dataset.events)&&void 0!==s?s:""),"f"),p(this,c,"f").onmessage=t=>{this.refresh()},p(this,c,"f").onerror=t=>{console.log("error",t)}))}}n=new WeakMap,o=new WeakMap,r=new WeakMap,a=new WeakMap,l=new WeakMap,c=new WeakMap,i=new WeakSet,h=function t(){!p(this,o,"f")||p(this,a,"f")<=0||(null!==p(this,r,"f")&&clearTimeout(p(this,r,"f")),v(this,r,setTimeout((()=>{this.refresh().then((()=>{p(this,i,"m",t).call(this)}))}),p(this,a,"f")),"f"))},e.default=g,u([(0,m.Listener)(y.PJaxLoadingEvent),d("design:type",Function),d("design:paramtypes",[]),d("design:returntype",void 0)],g.prototype,"onPageUnload",null),u([(0,m.Listener)(y.PJaxFinishEvent),d("design:type",Function),d("design:paramtypes",[]),d("design:returntype",void 0)],g.prototype,"onLoadingChat",null)},214:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Listener=void 0;const s=Symbol("internalListeners");e.Listener=function(t){return function(e,i,n){var o;if(!(s in e)){if("listeners"in e)throw new Error(`Cannot mix @Listener and 'listeners()' method on ${e.constructor.name}`);e[s]={},e.listeners=function(){const t=this[s],e={};for(const[s,i]of Object.entries(t))e[s]=i.map((t=>t.bind(this)));return e}}let r=null;if(r="string"==typeof t?t:(new t).name,!r)throw new Error(`Cannot resolve the event name for ${e.constructor.name}.${i}`);e[s][r]=null!==(o=e[s][r])&&void 0!==o?o:[],e[s][r].push(n.value)}},e.default=class{constructor(){this.listeners={}}register(t){for(const[e,s]of Object.entries(t.listeners()))s instanceof Array?s.forEach((t=>{this.subscribe(e,t)})):this.subscribe(e,s)}subscribe(t,e){var s;const i=null!==(s=this.listeners[t])&&void 0!==s?s:[];i.push(e),this.listeners[t]=i}dispatch(t,e){var s;e=null!=e?e:t.name,(null!==(s=this.listeners[e])&&void 0!==s?s:[]).forEach((function(e){e(t)}))}}},731:function(t,e,s){var i,n=this&&this.__decorate||function(t,e,s,i){var n,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,s,i);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,s,r):n(e,s))||r);return o>3&&r&&Object.defineProperty(e,s,r),r},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},r=this&&this.__classPrivateFieldSet||function(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s},a=this&&this.__classPrivateFieldGet||function(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.Layout=void 0;const l=s(188),c=s(214),h=s(2);class u{constructor(t){this.dom=t,i.set(this,void 0),r(this,i,new h.Autocomplete(this.dom.querySelector("#search-bar input[name=query]"),this.dom.querySelector("#search-bar .autocomplete-results")),"f")}start(){a(this,i,"f").init()}onPjaxLoading(t){var e,s;t.trigger&&(null===(e=this.dom.querySelector("header"))||void 0===e?void 0:e.contains(t.trigger))&&(null===(s=this.dom.querySelector("#page-content"))||void 0===s||s.classList.add("loading-start-top"))}onPjaxFinish(){const t=this.dom.querySelector("#page-content");t&&(t.classList.contains("loading-start-top")&&(t.classList.remove("loading-start-top"),t.classList.add("loading-end-top"),setTimeout((function(){t.classList.remove("loading-end-top")}),300)),t.classList.contains("loading-start-left")&&(t.classList.remove("loading-start-left"),t.classList.add("loading-end-left"),setTimeout((function(){t.classList.remove("loading-end-left")}),300)))}}e.Layout=u,i=new WeakMap,n([(0,c.Listener)(l.PJaxLoadingEvent),o("design:type",Function),o("design:paramtypes",[l.PJaxLoadingEvent]),o("design:returntype",void 0)],u.prototype,"onPjaxLoading",null),n([(0,c.Listener)(l.PJaxFinishEvent),o("design:type",Function),o("design:paramtypes",[]),o("design:returntype",void 0)],u.prototype,"onPjaxFinish",null)},188:function(t,e){var s,i,n,o,r,a=this&&this.__classPrivateFieldGet||function(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.PJaxFinishEvent=e.PJaxLoadingEvent=void 0;class l{constructor(t,e){this.target=t,this.trigger=e,this.name="pjax:loading"}}e.PJaxLoadingEvent=l;class c{constructor(t,e,s){this.target=t,this.content=e,this.trigger=s,this.name="pjax:finish"}}e.PJaxFinishEvent=c,s=new WeakSet,i=function(t){try{let e=JSON.parse(t);const s=this.app.dom;s.title=e.title||"My Blog";for(let t in e){const i=s.getElementById(t);if(i){const n=s.createElement("div");n.innerHTML=e[t],i.replaceChildren(...n.children[0].childNodes)}}return e}catch(e){this.app.reload(t)}},n=function(){this.app.dom.addEventListener("click",(t=>{t.target instanceof HTMLAnchorElement&&t.target.matches("a")&&(t.preventDefault(),this.load(t.target.href,!0,t.target))}))},o=function(){this.app.dom.addEventListener("submit",(t=>{if(t.target instanceof HTMLFormElement&&t.target.matches("form")){t.preventDefault();const e=t.target;e.classList.add("submitting"),e.inert=!0;let s=e.action;if("get"===e.method)return s+=(s.includes("?")?"&":"?")+new URLSearchParams(new FormData(e)),void this.load(s).then((function(){e.classList.remove("submitting"),e.inert=!1}));this.submit(s,new FormData(e)).then((()=>{e.classList.remove("submitting"),e.inert=!1}))}}))},r=function(){window.addEventListener("popstate",(t=>{this.load(location.href,!1)}))},e.default=class{constructor(t){s.add(this),this.app=t}start(){a(this,s,"m",n).call(this),a(this,s,"m",o).call(this),a(this,s,"m",r).call(this)}load(t,e=!0,s){return this.send(t,{},e,s)}submit(t,e,s=!0,i){return this.send(t,{method:"post",body:e},s,i)}send(t,e,n=!0,o){return this.app.dispatch(new l(t,o)),n&&history.pushState(null,"",t),e.headers||(e.headers={"X-PJAX":"true"}),fetch(t,e).then((e=>(n&&e.url!==t&&history.pushState(null,"",e.url),e.text()))).then((t=>a(this,s,"m",i).call(this,t))).then((e=>(e&&this.app.dispatch(new c(t,e,o)),e)))}}},667:function(t,e,s){var i=this&&this.__decorate||function(t,e,s,i){var n,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,s,i);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,s,r):n(e,s))||r);return o>3&&r&&Object.defineProperty(e,s,r),r},n=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;const o=s(188),r=s(214);class a{constructor(t){this.dom=t}animateOpenPost(t){if(!t.trigger)return;const e=t.trigger.closest(".post");e&&e instanceof HTMLElement&&(window.scrollTo(0,0),e.style.position="fixed",e.style.height=e.offsetHeight+"px",e.style.top=e.offsetTop+"px",setTimeout((function(){e.classList.add("opening"),e.style.height="",e.style.top=""}),1))}animateTagClick(t){var e;t.trigger&&t.trigger.closest(".tags")&&(null===(e=this.dom.querySelector("#page-content"))||void 0===e||e.classList.add("loading-start-left"))}}e.Post=a,i([(0,r.Listener)(o.PJaxLoadingEvent),n("design:type",Function),n("design:paramtypes",[o.PJaxLoadingEvent]),n("design:returntype",void 0)],a.prototype,"animateOpenPost",null),i([(0,r.Listener)(o.PJaxLoadingEvent),n("design:type",Function),n("design:paramtypes",[o.PJaxLoadingEvent]),n("design:returntype",void 0)],a.prototype,"animateTagClick",null)},180:function(t,e,s){var i,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(s(472)),r=n(s(105));null===(i=document.querySelector("html"))||void 0===i||i.dataset.layout,new o.default(document,r.default).start()},105:function(t,e,s){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(s(188)),o=s(731),r=s(667),a=i(s(362));e.default=t=>[new n.default(t),new o.Layout(t.dom),new r.Post(t.dom),new a.default(t)]}},e={};!function s(i){var n=e[i];if(void 0!==n)return n.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,s),o.exports}(180)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,